from flask import Flask, render_template, request, redirect, url_for
import os
import numpy as np
import cv2
import pandas as pd
import pefile
import joblib
from werkzeug.utils import secure_filename

app = Flask(__name__)

# Load the models
image_model_path = 'random_forest_model.pkl'
image_rf_model = joblib.load(image_model_path)

signature_model_path = 'random_forest_model2.pkl'
signature_model = joblib.load(signature_model_path)

# Define the features used by the signature model
selected_features = ['ImageBase', 'Characteristics', 'SizeOfStackReserve',
                     'VersionInformationSize', 'ResourcesMinSize', 'MinorImageVersion',
                     'DllCharacteristics', 'MajorOperatingSystemVersion', 'ResourcesNb',
                     'ExportNb', 'SectionsMaxEntropy', 'ResourcesMinEntropy', 'Subsystem',
                     'SizeOfInitializedData', 'BaseOfData']

# Set the upload folders and allowed file extensions
UPLOAD_FOLDER = 'uploads/'
IMAGE_UPLOAD_FOLDER = os.path.join(UPLOAD_FOLDER, 'images')
SIGNATURE_UPLOAD_FOLDER = os.path.join(UPLOAD_FOLDER, 'signatures')

if not os.path.exists(IMAGE_UPLOAD_FOLDER):
    os.makedirs(IMAGE_UPLOAD_FOLDER)
if not os.path.exists(SIGNATURE_UPLOAD_FOLDER):
    os.makedirs(SIGNATURE_UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['IMAGE_UPLOAD_FOLDER'] = IMAGE_UPLOAD_FOLDER
app.config['SIGNATURE_UPLOAD_FOLDER'] = SIGNATURE_UPLOAD_FOLDER

ALLOWED_IMAGE_EXTENSIONS = {'jpg', 'jpeg', 'png'}
ALLOWED_SIGNATURE_EXTENSIONS = {'exe'}

def allowed_image(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_IMAGE_EXTENSIONS

def allowed_signature(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_SIGNATURE_EXTENSIONS

def preprocess_image(image_path, size=(64, 64)):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    resized_image = cv2.resize(image, size)
    flattened_image = resized_image.flatten()
    return flattened_image

def extract_signature_features(filepath):
    try:
        pe = pefile.PE(filepath)
        version_info_size = 0
        if hasattr(pe, 'FileInfo') and pe.FileInfo:
            for file_info in pe.FileInfo:
                if hasattr(file_info, 'StringTable') and file_info.StringTable:
                    version_info_size += sum(
                        entry.struct.Version for entry in file_info.StringTable[0].entries.values())

        resources_min_size = 0
        if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE') and hasattr(pe.DIRECTORY_ENTRY_RESOURCE, 'entries'):
            resource_sizes = []
            for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                if hasattr(resource_type, 'directory'):
                    for resource_id in resource_type.directory.entries:
                        if hasattr(resource_id, 'directory'):
                            for resource_lang in resource_id.directory.entries:
                                if hasattr(resource_lang, 'data'):
                                    resource_sizes.append(resource_lang.data.struct.Size)
            if resource_sizes:
                resources_min_size = min(resource_sizes)

        resources_nb = len(pe.DIRECTORY_ENTRY_RESOURCE.entries) if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE') and hasattr(
            pe.DIRECTORY_ENTRY_RESOURCE, 'entries') else 0
        export_nb = len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') and hasattr(
            pe.DIRECTORY_ENTRY_EXPORT, 'symbols') else 0

        sections_max_entropy = max([section.get_entropy() for section in pe.sections]) if pe.sections else 0
        sections_min_entropy = min([section.get_entropy() for section in pe.sections]) if pe.sections else 0

        features = {
            'ImageBase': pe.OPTIONAL_HEADER.ImageBase,
            'Characteristics': pe.FILE_HEADER.Characteristics,
            'SizeOfStackReserve': pe.OPTIONAL_HEADER.SizeOfStackReserve,
            'VersionInformationSize': version_info_size,
            'ResourcesMinSize': resources_min_size,
            'MinorImageVersion': pe.OPTIONAL_HEADER.MinorImageVersion,
            'DllCharacteristics': pe.OPTIONAL_HEADER.DllCharacteristics,
            'MajorOperatingSystemVersion': pe.OPTIONAL_HEADER.MajorOperatingSystemVersion,
            'ResourcesNb': resources_nb,
            'ExportNb': export_nb,
            'SectionsMaxEntropy': sections_max_entropy,
            'ResourcesMinEntropy': sections_min_entropy,
            'Subsystem': pe.OPTIONAL_HEADER.Subsystem,
            'SizeOfInitializedData': pe.OPTIONAL_HEADER.SizeOfInitializedData,
            'BaseOfData': getattr(pe.OPTIONAL_HEADER, 'BaseOfData', 0)
        }
        return features

    except Exception as e:
        print(f"Error extracting features: {e}")
        return None

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/upload_image', methods=['POST'])
def upload_image_file():
    if 'image_file' not in request.files:
        return render_template('index.html', image_message='No image file selected')

    file = request.files['image_file']

    if file.filename == '':
        return render_template('index.html', image_message='No image file selected')

    if file and allowed_image(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.normpath(os.path.join(app.config['IMAGE_UPLOAD_FOLDER'], filename))
        file.save(filepath)
        image = preprocess_image(filepath)
        prediction = image_rf_model.predict([image])
        return render_template('index.html', image_message=f'Image file uploaded. Detected malware type: {prediction[0]}')

    return render_template('index.html', image_message='Invalid image file')

@app.route('/upload_signature', methods=['POST'])
def upload_signature_file():
    if 'signature_file' not in request.files:
        return render_template('index.html', signature_message='No signature file selected')

    file = request.files['signature_file']

    if file.filename == '':
        return render_template('index.html', signature_message='No signature file selected')

    if file and allowed_signature(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.normpath(os.path.join(app.config['SIGNATURE_UPLOAD_FOLDER'], filename))
        file.save(filepath)
        features = extract_signature_features(filepath)
        if features:
            df = pd.DataFrame([features])
            df = df[selected_features]
            prediction = signature_model.predict(df)
            result = 'Malware' if prediction[0] == 1 else 'Legitimate'
            return render_template('index.html', signature_message=f'Signature file uploaded. Detection result: {result}')

    return render_template('index.html', signature_message='Invalid signature file')

if __name__ == '__main__':
    app.run(debug=True)
